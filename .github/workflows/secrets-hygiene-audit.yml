name: Secrets Hygiene Audit

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  audit-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Audit workflow files for secret usage
        id: audit
        run: |
          echo "## Secrets Hygiene Audit" >> audit_report.md
          echo "" >> audit_report.md
          echo "**Scan Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> audit_report.md
          echo "" >> audit_report.md

          # Check for hardcoded secrets
          echo "### Hardcoded Secrets Check" >> audit_report.md
          if grep -r -i "api[_-]key\s*=\s*['\"][^$]" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" --exclude="*.yml" || true; then
            echo "‚ö†Ô∏è **WARNING**: Potential hardcoded API keys found!" >> audit_report.md
            echo "HARDCODED_SECRETS=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No hardcoded secrets detected" >> audit_report.md
            echo "HARDCODED_SECRETS=false" >> $GITHUB_ENV
          fi
          echo "" >> audit_report.md

          # Check for .env files in git
          echo "### Environment File Check" >> audit_report.md
          if git ls-files | grep -E "\.env$" | grep -v ".env.example" || true; then
            echo "‚ö†Ô∏è **WARNING**: .env files found in version control!" >> audit_report.md
            echo "ENV_FILES_COMMITTED=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No .env files in version control" >> audit_report.md
            echo "ENV_FILES_COMMITTED=false" >> $GITHUB_ENV
          fi
          echo "" >> audit_report.md

          # Audit workflow secret usage
          echo "### Workflow Secret Usage" >> audit_report.md
          echo "" >> audit_report.md

          # Find all workflow files
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml")

          for file in $WORKFLOW_FILES; do
            echo "#### $(basename "$file")" >> audit_report.md

            # Check for OIDC usage
            if grep -q "id-token: write" "$file"; then
              echo "- ‚úÖ Uses OIDC (no long-lived tokens)" >> audit_report.md
            fi

            # Check for secret references
            SECRET_COUNT=$(grep -c "\${{ secrets\." "$file" || echo "0")
            echo "- Secret references: $SECRET_COUNT" >> audit_report.md

            # List secrets used
            SECRETS=$(grep -o "\${{ secrets\.[A-Z_]* }}" "$file" | sed 's/\${{ secrets\.//g' | sed 's/ }}//g' | sort -u || echo "none")
            if [ "$SECRETS" != "none" ]; then
              echo "- Secrets used:" >> audit_report.md
              for secret in $SECRETS; do
                echo "  - \`$secret\`" >> audit_report.md
              done
            fi
            echo "" >> audit_report.md
          done

          # Check for secrets in logs
          echo "### Log Safety Check" >> audit_report.md
          if grep -r "console\.log.*secret" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" || true; then
            echo "‚ö†Ô∏è **WARNING**: Potential secret logging detected!" >> audit_report.md
            echo "SECRET_LOGGING=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No obvious secret logging patterns found" >> audit_report.md
            echo "SECRET_LOGGING=false" >> $GITHUB_ENV
          fi
          echo "" >> audit_report.md

          # OIDC adoption check
          echo "### OIDC Adoption Status" >> audit_report.md
          TOTAL_WORKFLOWS=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
          OIDC_WORKFLOWS=$(grep -l "id-token: write" .github/workflows/*.yml .github/workflows/*.yaml 2>/dev/null | wc -l || echo "0")
          OIDC_PERCENTAGE=$((OIDC_WORKFLOWS * 100 / TOTAL_WORKFLOWS))

          echo "- Total workflows: $TOTAL_WORKFLOWS" >> audit_report.md
          echo "- Workflows using OIDC: $OIDC_WORKFLOWS" >> audit_report.md
          echo "- OIDC adoption: ${OIDC_PERCENTAGE}%" >> audit_report.md

          if [ $OIDC_PERCENTAGE -lt 50 ]; then
            echo "- ‚ö†Ô∏è **Recommendation**: Increase OIDC adoption to reduce long-lived secrets" >> audit_report.md
          else
            echo "- ‚úÖ Good OIDC adoption rate" >> audit_report.md
          fi
          echo "" >> audit_report.md

          # Recommendations
          echo "### Recommendations" >> audit_report.md
          echo "" >> audit_report.md

          if [ "$HARDCODED_SECRETS" == "true" ] || [ "$ENV_FILES_COMMITTED" == "true" ] || [ "$SECRET_LOGGING" == "true" ]; then
            echo "üî¥ **CRITICAL ISSUES FOUND** - Immediate action required:" >> audit_report.md
            [ "$HARDCODED_SECRETS" == "true" ] && echo "- Remove hardcoded secrets from code" >> audit_report.md
            [ "$ENV_FILES_COMMITTED" == "true" ] && echo "- Remove .env files from version control" >> audit_report.md
            [ "$SECRET_LOGGING" == "true" ] && echo "- Remove secret logging statements" >> audit_report.md
            echo "CRITICAL_ISSUES=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No critical issues found" >> audit_report.md
            echo "CRITICAL_ISSUES=false" >> $GITHUB_ENV
          fi

          if [ $OIDC_PERCENTAGE -lt 100 ]; then
            echo "- Consider migrating remaining workflows to OIDC" >> audit_report.md
          fi

          echo "" >> audit_report.md
          echo "---" >> audit_report.md
          echo "*Automated audit generated by secrets-hygiene-audit.yml*" >> audit_report.md

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-hygiene-audit-report
          path: audit_report.md

      - name: Post audit summary
        run: |
          cat audit_report.md >> $GITHUB_STEP_SUMMARY

      - name: Create issue for critical findings
        if: env.CRITICAL_ISSUES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = fs.readFileSync('audit_report.md', 'utf8');

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîê CRITICAL: Secrets Hygiene Issues Detected',
              body: `## Critical Secrets Hygiene Issues Found

            An automated audit has detected critical security issues with secrets management.

            ${auditReport}

            ## Immediate Actions Required

            1. Review the audit report attached to this issue
            2. Address all critical findings immediately
            3. Re-run the audit to verify fixes

            ## Resources

            - [Secrets Management Guide](./docs/secrets-management.md)
            - [OIDC Setup Guide](./docs/oidc-cloudflare-setup.md)
            - [Security Policy](./SECURITY.md)

            ---
            *This issue was automatically created by the Secrets Hygiene Audit workflow.*`,
              labels: ['security', 'critical', 'P0']
            });

            console.log(`Created critical issue #${issue.data.number}`);

      - name: Notify on Slack (if configured)
        if: env.CRITICAL_ISSUES == 'true'
        run: |
          # Placeholder for Slack notification
          # Requires SLACK_WEBHOOK_URL secret to be configured
          echo "Critical secrets hygiene issues detected. Manual notification required."
