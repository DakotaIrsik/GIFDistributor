name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  deploy-workers:
    name: Deploy Cloudflare Workers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/staging'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: 'staging'
          workingDirectory: './api'

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: 'production'
          workingDirectory: './api'

  deploy-pages:
    name: Deploy Cloudflare Pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build
        working-directory: ./web
        env:
          NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.yourdomain.com' || 'https://api-staging.yourdomain.com' }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 'gifdistributor'
          directory: './web/out'
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref || github.ref_name }}

  update-dns:
    name: Update DNS Records
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-workers, deploy-pages]

    steps:
      - name: Update DNS via Cloudflare API
        run: |
          # Update A record for API subdomain
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.API_DNS_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_DNS_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"CNAME","name":"api","content":"gifdistributor-api.workers.dev","ttl":1,"proxied":true}'

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-workers, deploy-pages]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Health Check - API
        run: |
          sleep 10  # Wait for deployment propagation
          curl -f https://api.yourdomain.com/health || exit 1

      - name: Health Check - Web
        run: |
          curl -f https://yourdomain.com || exit 1

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord notification here

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add Slack/Discord notification here
